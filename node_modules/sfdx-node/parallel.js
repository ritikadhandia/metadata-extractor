const { fork } = require('child_process');
const fs = require('fs');
const path = require('path');
const _ = require('lodash');
const Promise = require('bluebird');

const ALM_PATH = path.dirname(require.resolve('salesforce-alm'));
const CMD_DIR = path.join(ALM_PATH, 'commands');
const ROOT_COMMAND = 'force';
const cmdArray = [];

const processCommandsDir = (suffix) => {
  const cmdsDir = path.join(CMD_DIR, suffix);
  fs.readdirSync(cmdsDir).forEach((fileOrDir) => {
    const cmdDefPath = path.join(cmdsDir, fileOrDir);
    if (fs.statSync(cmdDefPath).isDirectory()) {
      processCommandsDir(path.join(suffix, fileOrDir));
    } else {
      if (suffix !== ROOT_COMMAND && path.extname(cmdDefPath) === '.js') {
        const obj = {};
        const fileNameWithoutExt = fileOrDir.replace('.js', '');
        obj['commandKey'] = path.join(suffix, fileNameWithoutExt);
        cmdArray.push(obj);
      }
    }
  });
};

const _createCommand = (topic, command) => (flags, opts) => new Promise((resolve, reject) => {
  const childArgs = {
    topic,
    command,
    flags,
    opts
  };
  const child = fork(path.join(__dirname, 'child.js'), ['--colors'], { stdio: 'pipe' });
  child.stderr.on('data', (data) => {
    console.log(data.toString().replace(new RegExp('\\n$'), ''));
  });
  child.stdout.on('data', (data) => {
    console.log(data.toString().replace(new RegExp('\\n$'), ''));
  });
  child.on('message', (message) => {
    if (message.type === 'resolved') {
      resolve(message.value);
    } else {
      reject(message.value);
    }
  });
  child.send({
    cmd: "SFDX_PARALLEL_init",
    args: childArgs
  });
});

const buildAllCommands = () => {
  processCommandsDir(ROOT_COMMAND);
  _.forEach(cmdArray, (cmdObj) => {
    const { commandKey } = cmdObj;
    const cmdKeyParts = commandKey.split(path.sep);
    let topic;
    const methodNamePartsArray = [];
    _.forEach(cmdKeyParts, (part, index) => {
      if (index !== 0) {
        if (index === 1) {
          topic = part;
          if (!_.has(sfdxApi, part)) {
            sfdxApi[part] = {};
          }
        } else {
          methodNamePartsArray.push(part);
        }
      }
    });
    const methodName = _.camelCase(methodNamePartsArray.join('-'));
    sfdxApi[topic][methodName] = _createCommand(topic, methodName);
  });
};

const sfdxApi = {};
buildAllCommands();
module.exports = sfdxApi;
