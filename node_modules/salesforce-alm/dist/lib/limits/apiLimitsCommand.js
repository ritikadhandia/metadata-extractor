"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const Config = require("../force-cli/force-cli-config");
const Error = require("../force-cli/force-cli-error");
const Display = require("../force-cli/force-cli-display");
const logApi = require("../core/logApi");
const util = require("util");
let logger;
class ApiLimitsCommand {
    constructor() {
        logger = logApi.child('limits:api:display');
    }
    validate(context) { }
    async execute(context, doneCallback) {
        try {
            let conn = await Config.getActiveConnection(context);
            let geturl = util.format('%s/services/data/v%s/limits', conn.instanceUrl, conn.version);
            let limits;
            await conn.request(geturl, function (err, response) {
                if (err) {
                    logger.error(err);
                    Error.exitWithMessage(err.message);
                }
                limits = exports.parseResponse(response);
                Display.apiLimits(limits);
            });
            return limits;
        }
        catch (err) {
            logger.error(err);
            Error.exitWithMessage(err.message);
        }
    }
}
exports.ApiLimitsCommand = ApiLimitsCommand;
/**
 * constructs ApiLimit objects from server response
 * exposed for unit testing
 * @param {Object} response
 * @returns {ApiLimit[]}
 */
exports.parseResponse = function (response) {
    let limits = [];
    for (let limitName in response) {
        if (response.hasOwnProperty(limitName)) {
            limits.push({
                name: limitName,
                max: response[limitName]['Max'],
                remaining: response[limitName]['Remaining']
            });
        }
    }
    return limits;
};

//# sourceMappingURL=apiLimitsCommand.js.map
