"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const command_1 = require("@salesforce/command");
const Messages = require("../../../lib/messages");
const ToolbeltCommand_1 = require("../../../ToolbeltCommand");
const fs = require("fs");
const messages = Messages();
class OrgListCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const heroku = require('heroku-cli-util');
        const BBPromise = require('bluebird');
        BBPromise.promisifyAll(fs);
        const OrgListCommand = require('../../../lib/org/orgListCommand');
        return this.execLegacyCommand(new OrgListCommand(heroku.prompt), context);
    }
}
OrgListCommand.theDescription = messages.getMessage('description', [], 'org_list');
OrgListCommand.longDescription = messages.getMessage('longDescription', [], 'org_list');
OrgListCommand.help = messages.getMessage('help', [], 'org_list');
OrgListCommand.requiresProject = false;
OrgListCommand.flagsConfig = {
    verbose: command_1.flags.builtin({
        description: messages.getMessage('verbose', [], 'org_list'),
        longDescription: messages.getMessage('verboseLong', [], 'org_list')
    }),
    all: command_1.flags.boolean({
        description: messages.getMessage('all', [], 'org_list'),
        longDescription: messages.getMessage('allLong', [], 'org_list'),
        required: false
    }),
    clean: command_1.flags.boolean({
        description: messages.getMessage('clean', [], 'org_list'),
        longDescription: messages.getMessage('cleanLong', [], 'org_list'),
        required: false
    }),
    noprompt: command_1.flags.boolean({
        char: 'p',
        description: messages.getMessage('noPrompt', [], 'org_list'),
        longDescription: messages.getMessage('noPromptLong', [], 'org_list'),
        required: false
    })
};
exports.OrgListCommand = OrgListCommand;

//# sourceMappingURL=list.js.map
